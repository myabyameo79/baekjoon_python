from itertools import combinations
def gcd(a,b):
    while a%b:
        return gcd(b,a%b)
    return b

def choco(a):
    for i in range(2,a):
        if gcd(i,a)==1:
            if power(i,a-1,a)!=1:
                return False
    return True
def power(a,b,c):
    if b==1:
        return a%c
    t=power(a,b//2,c)
    if b%2:
        return (t*t*a)%c
    return (t*t)%c
def sosu(n,a):
    s,d=0,n-1
    while d%2==0:
        s+=1
        d//=2
    x=power(a,d,n)
    if x==1 or x+1==n:
        return True
    for i in range(s-1):
        x=power(x,2,n)
        if x+1==n or x==1:
            return True
    return False
prime_li=[2,3,5,7,11,13,17,19,23,29,31,37,41]
def isprime(n):
    check=0
    if n<=41:
        if n in prime_li:
            return True
        else:
            return False
    else:
        for i in prime_li:
            if sosu(n,i)==False:
                break
            else:
                check+=1
        if check==13:
            return True
        else:return False
def korselt(li):
    if len(set(li))!=11:
        return False
    num=0
    for i in range(11):
        n=1
        for j in range(11):
            n*=li[j]
            n%=li[i]-1
        if n!=1:
            return False
    return True
li=[]
x=1081080
for i in range(1,x+1):
    if x%i==0:
        li.append(i)
print(len(li))
l=13426
ans=[]

for i in li:
    if isprime(l*i+1) and 10**7<=l*i+1<10**8:
        ans.append(i*l+1)

print(len(ans))

for t in combinations(ans,11):
    if korselt(t):
        print(t)
